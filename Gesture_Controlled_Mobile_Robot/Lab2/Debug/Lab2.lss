
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001de  008001de  00000488  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b10  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000530  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000207  00000000  00000000  000023bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3d       	cpi	r26, 0xDE	; 222
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ed       	ldi	r26, 0xDE	; 222
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3e       	cpi	r26, 0xEA	; 234
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  9e:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_10>:
	morseData.index = 0;  // Reset buffer index
	clearBuffer();  // Clear the Morse sequence buffer
}

// Interrupt service routine for Timer/Counter1 capture event
ISR(TIMER1_CAPT_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	// Check edge detection type
	if (TCCR1B & (1 << ICES1)) {
  b8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  bc:	86 ff       	sbrs	r24, 6
  be:	09 c0       	rjmp	.+18     	; 0xd2 <__vector_10+0x2c>
		morseData.start_time = ICR1;  // Capture start time of button press
  c0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  c4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c8:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__data_end+0x1>
  cc:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <__vector_10+0x40>
		} else {
		morseData.end_time = ICR1;  // Capture end time of button press
  d2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  d6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  da:	ee ed       	ldi	r30, 0xDE	; 222
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	93 83       	std	Z+3, r25	; 0x03
  e0:	82 83       	std	Z+2, r24	; 0x02
		morseData.state = CHECK_DURATION;  // Set state to check the duration of the press
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	83 87       	std	Z+11, r24	; 0x0b
	}
	TCCR1B ^= (1 << ICES1);  // Toggle edge detection type
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	89 27       	eor	r24, r25
  f0:	80 83       	st	Z, r24
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <decodeMorse>:
		break;
	}
}

// Function to decode the Morse sequence to its corresponding character
void decodeMorse(void) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
	for (int i = 0; i < 36; i++) {
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	1d c0       	rjmp	.+58     	; 0x148 <decodeMorse+0x44>
		if (strcmp(morseData.sequence, morseTable[i]) == 0) {
 10e:	be 01       	movw	r22, r28
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	6c 0f       	add	r22, r28
 116:	7d 1f       	adc	r23, r29
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	6a 5f       	subi	r22, 0xFA	; 250
 11e:	7e 4f       	sbci	r23, 0xFE	; 254
 120:	82 ee       	ldi	r24, 0xE2	; 226
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 80 01 	call	0x300	; 0x300 <strcmp>
 128:	89 2b       	or	r24, r25
 12a:	69 f4       	brne	.+26     	; 0x146 <decodeMorse+0x42>
			morseData.decodedChar = (i < 26) ? ('A' + i) : ('0' + (i - 26));
 12c:	ca 31       	cpi	r28, 0x1A	; 26
 12e:	d1 05       	cpc	r29, r1
 130:	14 f4       	brge	.+4      	; 0x136 <decodeMorse+0x32>
 132:	cf 5b       	subi	r28, 0xBF	; 191
 134:	01 c0       	rjmp	.+2      	; 0x138 <decodeMorse+0x34>
 136:	ca 5e       	subi	r28, 0xEA	; 234
 138:	ee ed       	ldi	r30, 0xDE	; 222
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	c2 87       	std	Z+10, r28	; 0x0a
			UART_send(morseData.decodedChar);  // Send the decoded character over UART
 13e:	82 85       	ldd	r24, Z+10	; 0x0a
 140:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_send>
			return;
 144:	04 c0       	rjmp	.+8      	; 0x14e <decodeMorse+0x4a>
	}
}

// Function to decode the Morse sequence to its corresponding character
void decodeMorse(void) {
	for (int i = 0; i < 36; i++) {
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	c4 32       	cpi	r28, 0x24	; 36
 14a:	d1 05       	cpc	r29, r1
 14c:	04 f3       	brlt	.-64     	; 0x10e <decodeMorse+0xa>
			morseData.decodedChar = (i < 26) ? ('A' + i) : ('0' + (i - 26));
			UART_send(morseData.decodedChar);  // Send the decoded character over UART
			return;
		}
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <clearBuffer>:

// Function to clear the Morse sequence buffer
void clearBuffer(void) {
	for (int i = 0; i < MAX_BUFFER; i++) {
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	05 c0       	rjmp	.+10     	; 0x164 <clearBuffer+0x10>
		morseData.sequence[i] = 0;  // Clear each element in the buffer
 15a:	fc 01       	movw	r30, r24
 15c:	e2 52       	subi	r30, 0x22	; 34
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	14 82       	std	Z+4, r1	; 0x04
	}
}

// Function to clear the Morse sequence buffer
void clearBuffer(void) {
	for (int i = 0; i < MAX_BUFFER; i++) {
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	91 05       	cpc	r25, r1
 168:	c4 f3       	brlt	.-16     	; 0x15a <clearBuffer+0x6>
		morseData.sequence[i] = 0;  // Clear each element in the buffer
	}
	morseData.index = 0;  // Reset buffer index
 16a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__data_end+0x9>
 16e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end+0x8>
 172:	08 95       	ret

00000174 <initialize>:
	return 0;
}

// Function to initialize the system configurations and variables
void initialize(void) {
	cli();  // Disable global interrupts.
 174:	f8 94       	cli
	UART_init(BAUD_PRESCALER);  // Initialize UART with the computed baud rate prescaler.
 176:	87 e6       	ldi	r24, 0x67	; 103
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_init>
	DDRB |= (1 << PB1) | (1 << PB2);  // Configure PB1 and PB2 as outputs.
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	86 60       	ori	r24, 0x06	; 6
 182:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB0);  // Configure PB0 as input.
 184:	84 b1       	in	r24, 0x04	; 4
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	84 b9       	out	0x04, r24	; 4
	CLKPR |= (1 << CLKPCE);  // Allow changes to Clock Prescale Register.
 18a:	e1 e6       	ldi	r30, 0x61	; 97
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12) | (1 << CS10) | (1 << ICNC1) | (1 << ICES1);  // Timer/Counter1 configuration.
 194:	e1 e8       	ldi	r30, 0x81	; 129
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	85 6c       	ori	r24, 0xC5	; 197
 19c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << ICIE1);  // Enable Timer/Counter1 capture event interrupt.
 19e:	ef e6       	ldi	r30, 0x6F	; 111
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	80 83       	st	Z, r24
	sei();  // Enable global interrupts.
 1a8:	78 94       	sei
	
	morseData.state = WAIT_FOR_PRESS;  // Set initial state to waiting for button press
 1aa:	ee ed       	ldi	r30, 0xDE	; 222
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	13 86       	std	Z+11, r1	; 0x0b
	morseData.index = 0;  // Reset buffer index
 1b0:	11 86       	std	Z+9, r1	; 0x09
 1b2:	10 86       	std	Z+8, r1	; 0x08
	clearBuffer();  // Clear the Morse sequence buffer
 1b4:	0e 94 aa 00 	call	0x154	; 0x154 <clearBuffer>
 1b8:	08 95       	ret

000001ba <processMorse>:
	TCCR1B ^= (1 << ICES1);  // Toggle edge detection type
}

// Main function to process Morse input based on its current state
void processMorse(void) {
	switch (morseData.state) {
 1ba:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <__data_end+0xb>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	b9 f0       	breq	.+46     	; 0x1f0 <processMorse+0x36>
 1c2:	20 f0       	brcs	.+8      	; 0x1cc <processMorse+0x12>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	09 f4       	brne	.+2      	; 0x1ca <processMorse+0x10>
 1c8:	6c c0       	rjmp	.+216    	; 0x2a2 <processMorse+0xe8>
 1ca:	08 95       	ret
		case WAIT_FOR_PRESS:
		// Check if a significant time has elapsed to move to decode state
		if ((TCNT1 - morseData.end_time) > 45000) {
 1cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1d0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1d4:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <__data_end+0x2>
 1d8:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <__data_end+0x3>
 1dc:	82 1b       	sub	r24, r18
 1de:	93 0b       	sbc	r25, r19
 1e0:	89 3c       	cpi	r24, 0xC9	; 201
 1e2:	9f 4a       	sbci	r25, 0xAF	; 175
 1e4:	08 f4       	brcc	.+2      	; 0x1e8 <processMorse+0x2e>
 1e6:	63 c0       	rjmp	.+198    	; 0x2ae <processMorse+0xf4>
			morseData.state = DECODE;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <__data_end+0xb>
 1ee:	08 95       	ret
		}
		break;
		case CHECK_DURATION:
		// Check if the press duration corresponds to a dot or dash
		// Update the Morse sequence buffer and the output LED accordingly
		if ((morseData.end_time - morseData.start_time) >= 468 && (morseData.end_time - morseData.start_time) <= 3000) {
 1f0:	ee ed       	ldi	r30, 0xDE	; 222
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	82 81       	ldd	r24, Z+2	; 0x02
 1f6:	93 81       	ldd	r25, Z+3	; 0x03
 1f8:	20 81       	ld	r18, Z
 1fa:	31 81       	ldd	r19, Z+1	; 0x01
 1fc:	82 1b       	sub	r24, r18
 1fe:	93 0b       	sbc	r25, r19
 200:	9c 01       	movw	r18, r24
 202:	24 5d       	subi	r18, 0xD4	; 212
 204:	31 40       	sbci	r19, 0x01	; 1
 206:	25 3e       	cpi	r18, 0xE5	; 229
 208:	39 40       	sbci	r19, 0x09	; 9
 20a:	10 f5       	brcc	.+68     	; 0x250 <processMorse+0x96>
			UART_putstring(". ");
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_putstring>
			morseData.sequence[morseData.index++] = '.';
 214:	ee ed       	ldi	r30, 0xDE	; 222
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	80 85       	ldd	r24, Z+8	; 0x08
 21a:	91 85       	ldd	r25, Z+9	; 0x09
 21c:	9c 01       	movw	r18, r24
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	31 87       	std	Z+9, r19	; 0x09
 224:	20 87       	std	Z+8, r18	; 0x08
 226:	fc 01       	movw	r30, r24
 228:	e2 52       	subi	r30, 0x22	; 34
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	2e e2       	ldi	r18, 0x2E	; 46
 22e:	24 83       	std	Z+4, r18	; 0x04
			PORTB |= (1 << PB1);
 230:	85 b1       	in	r24, 0x05	; 5
 232:	82 60       	ori	r24, 0x02	; 2
 234:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e7       	ldi	r25, 0x70	; 112
 23a:	22 e0       	ldi	r18, 0x02	; 2
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <processMorse+0x82>
 244:	00 c0       	rjmp	.+0      	; 0x246 <processMorse+0x8c>
 246:	00 00       	nop
			_delay_ms(50);
			PORTB &= ~(1 << PB1);
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	26 c0       	rjmp	.+76     	; 0x29c <processMorse+0xe2>
		} else if ((morseData.end_time - morseData.start_time) >= 3000 && (morseData.end_time - morseData.start_time) <= 6250) {
 250:	88 5b       	subi	r24, 0xB8	; 184
 252:	9b 40       	sbci	r25, 0x0B	; 11
 254:	83 3b       	cpi	r24, 0xB3	; 179
 256:	9c 40       	sbci	r25, 0x0C	; 12
 258:	08 f5       	brcc	.+66     	; 0x29c <processMorse+0xe2>
			UART_putstring("- ");
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_putstring>
			morseData.sequence[morseData.index++] = '-';
 262:	ee ed       	ldi	r30, 0xDE	; 222
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	80 85       	ldd	r24, Z+8	; 0x08
 268:	91 85       	ldd	r25, Z+9	; 0x09
 26a:	9c 01       	movw	r18, r24
 26c:	2f 5f       	subi	r18, 0xFF	; 255
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	31 87       	std	Z+9, r19	; 0x09
 272:	20 87       	std	Z+8, r18	; 0x08
 274:	fc 01       	movw	r30, r24
 276:	e2 52       	subi	r30, 0x22	; 34
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	2d e2       	ldi	r18, 0x2D	; 45
 27c:	24 83       	std	Z+4, r18	; 0x04
			PORTB |= (1 << PB2);
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	84 60       	ori	r24, 0x04	; 4
 282:	85 b9       	out	0x05, r24	; 5
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	90 e7       	ldi	r25, 0x70	; 112
 288:	22 e0       	ldi	r18, 0x02	; 2
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <processMorse+0xd0>
 292:	00 c0       	rjmp	.+0      	; 0x294 <processMorse+0xda>
 294:	00 00       	nop
			_delay_ms(50);
			PORTB &= ~(1 << PB2);
 296:	85 b1       	in	r24, 0x05	; 5
 298:	8b 7f       	andi	r24, 0xFB	; 251
 29a:	85 b9       	out	0x05, r24	; 5
		}
		morseData.state = WAIT_FOR_PRESS;  // Reset state to waiting for button press
 29c:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <__data_end+0xb>
		break;
 2a0:	08 95       	ret
		case DECODE:
		decodeMorse();  // Decode the Morse sequence to a character
 2a2:	0e 94 82 00 	call	0x104	; 0x104 <decodeMorse>
		clearBuffer();  // Clear the Morse sequence buffer for the next input
 2a6:	0e 94 aa 00 	call	0x154	; 0x154 <clearBuffer>
		morseData.state = WAIT_FOR_PRESS;  // Reset state to waiting for button press
 2aa:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <__data_end+0xb>
 2ae:	08 95       	ret

000002b0 <main>:
void processMorse(void);
void clearBuffer(void);
void decodeMorse(void);

int main(void) {
	initialize();  // Initialize system configurations
 2b0:	0e 94 ba 00 	call	0x174	; 0x174 <initialize>

	// Main loop to keep processing Morse input
	while (1) {
		processMorse();
 2b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <processMorse>
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <main+0x4>

000002ba <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
 2ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
 2be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2c2:	88 e1       	ldi	r24, 0x18	; 24
 2c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 2c8:	e2 ec       	ldi	r30, 0xC2	; 194
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	80 83       	st	Z, r24
  UCSR0C |= (1<<USBS0); // 2 stop bits
 2d0:	80 81       	ld	r24, Z
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

000002d8 <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
 2d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2dc:	95 ff       	sbrs	r25, 5
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <UART_send>
  // Put data into buffer and send data
  UDR0 = data;
 2e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e4:	08 95       	ret

000002e6 <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
 2ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_send>
  StringPtr++;
 2f2:	21 96       	adiw	r28, 0x01	; 1
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
 2f4:	88 81       	ld	r24, Y
 2f6:	81 11       	cpse	r24, r1
 2f8:	fa cf       	rjmp	.-12     	; 0x2ee <UART_putstring+0x8>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <strcmp>:
 300:	fb 01       	movw	r30, r22
 302:	dc 01       	movw	r26, r24
 304:	8d 91       	ld	r24, X+
 306:	01 90       	ld	r0, Z+
 308:	80 19       	sub	r24, r0
 30a:	01 10       	cpse	r0, r1
 30c:	d9 f3       	breq	.-10     	; 0x304 <strcmp+0x4>
 30e:	99 0b       	sbc	r25, r25
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
